<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fw.core.mapper.db1.hh.HhPointMapper">

    <!-- 보유 포인트 조회 -->
    <select id="selectHhPoint" parameterType="FoPointDTO" resultType="FoPointDTO">
        /*com.fw.core.mapper.db1.hh.HhPointMapper.selectHhPoint,  보유 포인트 조회, 2023.1 , skayhlj@gmail.com, HhPointMapper.xml*/
        SELECT p.id
             , p.balance
             , m.id memberId
             , p.paidPoint
             , p.freePoint
          FROM point p
         RIGHT OUTER JOIN member m ON m.id = p.member_id
         WHERE m.id = #{memberId}
    </select>

    <!-- 포인트 update  -->
    <update id="updatePoint" parameterType="FoPointDTO">
        /*com.fw.core.mapper.db1.hh.HhPointMapper.updatePoint, 포인트 update, 2023.1 , skayhlj@gmail.com, HhPointMapper.xml*/
        UPDATE point
           SET balance = freePoint + #{freeIncrease} + paidPoint + #{paidIncrease}
             , freePoint = freePoint + #{freeIncrease}
             , paidPoint = paidPoint + #{paidIncrease}
             , updatedAt = NOW()
         WHERE member_id = #{memberId}
    </update>

    <!-- 포인트 변경 내역-->
    <insert id="insertPointUseHistory" parameterType="FoPointDTO">
        /*com.fw.core.mapper.db1.hh.HhPointMapper.insertPointUseHistory, 포인트 변경 내역,  2023.1 , skayhlj@gmail.com, HhPointMapper.xml*/
        INSERT INTO point_use_history (
               createdAt
             , updatedAt
             , reasonCd
             , member_id
             , point_id
             , freeBalance
             , freeIncrease
             , paidBalance
             , paidIncrease
             , payment_id
        )
        SELECT NOW()
             , NOW()
             , #{type}
             , member_id
             , id
             , freePoint
             , #{freeIncrease}
             , paidPoint
             , #{paidIncrease}
             , #{paymentId}
        FROM point
        WHERE member_id = #{memberId}
    </insert>

    <!-- hh 포인트 테이블에 없을시 insert -->
    <insert id="insertPointHh" parameterType="FoPointDTO">
        /*com.fw.core.mapper.db1.hh.HhPointMapper.insertPointHh, hh포인트테이블에 없을시 insert  2023.1 , skayhlj@gmail.com, HhPointMapper.xml*/
        INSERT INTO point (
               createdAt
             , updatedAt
             , balance
             , freePoint
             , paidPoint
             , member_id
             , delFlag
        ) VALUES (
               NOW()
             , NOW()
             , 0
             , 0
             , 0
             , #{memberId}
             , 'N'
        )
    </insert>

    <!-- 포인트 구매시 payment insert -->
    <insert id="insertPayment" parameterType="HhPaymentDTO">
        /*com.fw.core.mapper.db1.hh.HhPointMapper.insertPayment, 포인트 구매시 payment insert, 2023.1 , skayhlj@gmail.com, HhPointMapper.xml*/
        INSERT INTO payment (
               cancelledPrice
             , createdAt
             , method /*not null*/
             , methodName
             , orderId /*not null*/
             , paymentData
             , pg
             , pgName
             , price /*not null*/
             , productName /*not null*/
             , purchasedAt
             , receiptId /*not null*/
             , remainPrice
             , revokedAt
             , status /*not null*/
             , unit
             , member_id /*not null*/
             , point_product_id /*not null*/
             , requestedAt
             , bankCode
             , bankName
             , virtualAccount
             , depositor
             , expireDate
             , delFlag
        ) VALUES (
               #{cancelledPrice}
             , NOW()
             , UPPER(#{method}) /*not null*/
             , #{methodName}
             , #{orderId} /*not null*/
             , #{paymentData}
             , #{pg}
             , #{pgName}
             , #{price} /*not null*/
             , #{productName} /*not null*/
             , #{purchasedAt}
             , #{receiptId} /*not null*/
             , #{remainPrice}
             , #{revokedAt}
             , #{status} /*not null*/
             , #{unit}
             , #{frontSession.id} /*not null*/
             , #{pointProductId} /*not null*/
             , #{requestedAt}
             , #{bankCode}
             , #{bankName}
             , #{virtualAccount}
             , #{depositor}
             , #{expireDate}
             , 'N'
        )
        <selectKey order="AFTER" keyProperty="id" resultType="String">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <!-- 결제취소 가능 포인트 조회 -->
    <select id="selectPurchasePoint" parameterType="HhPointUseHistoryDTO" resultType="HhPointUseHistoryDTO">
        /* com.fw.core.mapper.db1.hh.HhPointMapper.selectInWeekPurchasePoint, 결제취소 가능 포인트 조회, yj, HhPointMapper.xml */
        SELECT PUH.id
             , DATE_FORMAT(PUH.createdAt,'%Y.%m.%d. %T') AS createdAt
             , PUH.updatedAt
             , PUH.reasonCd
             , fn_get_common_cd(PUH.reasonCd,'POINT_USE',1) AS reasonNm
             , PUH.member_id
             , PUH.payment_id
             , P.method
             , P.orderId
             , P.price
             , P.remainPrice
             , P.cancelledPrice
             , P.receiptId
             , P.status
             , P.member_id
             , P.point_product_id
             , P.bankCode
             , P.bankName
             , P.virtualAccount
             , P.depositor
             , P.expireDate
             , PUH.point_id
             , PUH.freeBalance
             , PUH.freeIncrease
             , PUH.paidBalance
             , PUH.paidIncrease
             , PUH.adminReason
             , PUH.backoffice_admin_id
             , PUH.delFlag
             , (freeIncrease + paidIncrease) AS pointIncrease
          FROM point_use_history PUH
         INNER JOIN payment P ON PUH.payment_id = P.id
         WHERE PUH.member_id = #{frontSession.id}
           AND P.delFlag = 'N'
           AND PUH.delFlag = 'N'
           AND PUH.reasonCd = #{reasonCd}
           <if test="reasonCd == 'ADD_PURCHASE' ">
               AND <![CDATA[ P.status <> 'CANCELED' ]]>
               AND PUH.createdAt BETWEEN DATE_ADD(NOW(),INTERVAL-1 WEEK) AND NOW()
               <![CDATA[ AND PUH.freeIncrease <= (SELECT freePoint FROM point WHERE id = PUH.point_id)
           AND PUH.paidIncrease <= (SELECT paidPoint FROM point WHERE id = PUH.point_id) ]]>
           </if>
    </select>

    <!-- 결제취소 가능 포인트 상세조회 -->
    <select id="selectPurchasePointInfo" parameterType="HhPointUseHistoryDTO" resultType="HhPointUseHistoryDTO">
        /* com.fw.core.mapper.db1.hh.HhPointMapper.selectPurchasePointInfo, 결제취소 가능 포인트 상세조회, yj, HhPointMapper.xml */
        SELECT PUH.id
        , DATE_FORMAT(PUH.createdAt,'%Y.%m.%d. %T') AS createdAt
        , PUH.updatedAt
        , PUH.reasonCd
        , fn_get_common_cd(PUH.reasonCd,'POINT_USE',1) AS reasonNm
        , PUH.member_id
        , PUH.payment_id
        , P.method
        , P.orderId
        , P.price
        , P.remainPrice
        , P.cancelledPrice
        , P.receiptId
        , P.status
        , P.member_id
        , P.point_product_id
        , P.bankCode
        , P.bankName
        , P.virtualAccount
        , P.depositor
        , P.expireDate
        , PUH.point_id
        , PUH.freeBalance
        , PUH.freeIncrease
        , PUH.paidBalance
        , PUH.paidIncrease
        , PUH.adminReason
        , PUH.backoffice_admin_id
        , PUH.delFlag
     FROM point_use_history PUH
    INNER JOIN payment P ON PUH.payment_id = P.id
    WHERE PUH.id = #{id}
    </select>

    <!--결제취소 구매내역 업데이트 -->
    <update id="updatePayment" parameterType="HhPaymentDTO" >
        /* com.fw.core.mapper.db1.hh.HhPointMapper.updatePayment, 결제취소 구매내역 업데이트 , yj, HhPointMapper.xml */
        UPDATE payment SET
               cancelledPrice = #{cancelledPrice}
             , remainPrice = #{remainPrice}
             , revokedAt = NOW()
             , status = #{status}
        WHERE id = #{id}
    </update>

</mapper>